# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: bmetehri <bmetehri@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/02/21 11:36:46 by bmetehri          #+#    #+#              #
#    Updated: 2025/02/21 11:49:33 by bmetehri         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# Colors for output
GREEN = \033[0;32m
RED = \033[0;31m
YELLOW = \033[0;33m
BLUE = \033[0;34m
RESET = \033[0m

# Compiler and flags
CXX = c++
CXXFLAGS = -Wall -Wextra -Werror -std=c++98 -Wshadow -MMD
# LDFLAGS can be defined here if specific linker flags are needed (e.g., -static)

# Target executable name
TARGET = convert

# Source files
SRCS =		ScalarConverter.cpp	\
			main.cpp

# Object files derived from source files
OBJS = $(SRCS:.cpp=.o)

# Phony targets declaration
# These targets do not represent actual files and should always be executed
.PHONY: all clean fclean re vg

# Default target: build the executable
# Depends on $(TARGET), which triggers the compilation and linking process
all: $(TARGET)

# Pattern rule to compile source files into object files
# Uses colorful output to indicate compilation progress
# The -MMD flag generates dependency files (.d) for header dependencies
$(OBJS): %.o: %.cpp
	@echo "$(GREEN)Compiling $<...$(RESET)"
	@$(CXX) $(CXXFLAGS) -c $< -o $@

# Rule to link object files into the target executable
# Includes $(CXXFLAGS) for consistency, though most flags are compilation-specific
# $(LDFLAGS) can be used for linker-specific flags if defined
$(TARGET): $(OBJS)
	@echo "$(BLUE)Linking $@...$(RESET)"
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^
	@echo "$(BLUE)Done$(RESET)"

# Clean rule: remove object files and dependency files
# Uses -f with rm to avoid errors if files don't exist
clean:
	@echo "$(YELLOW)Cleaning object files...$(RESET)"
	@rm -f $(OBJS) $(OBJS:.o=.d)
	@echo "$(YELLOW)Done$(RESET)"

# Full clean rule: remove object files, dependency files, and the executable
# Depends on clean to avoid duplicating removal commands
fclean: clean
	@echo "$(YELLOW)Cleaning executable...$(RESET)"
	@rm -f $(TARGET)
	@echo "$(YELLOW)Done$(RESET)"

# Rebuild rule: clean everything and rebuild from scratch
# Depends on fclean and all, executed in that order
re: fclean all

# Valgrind rule: rebuild and run the program under Valgrind for memory leak checks
# Depends on re to ensure a clean build before running Valgrind
vg: re
	@echo "$(RED)Running Valgrind...$(RESET)"
	@valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./$(TARGET)

# Include dependency files generated by -MMD
# -include is used to ignore errors if .d files don't exist yet
-include $(OBJS:.o=.d)
